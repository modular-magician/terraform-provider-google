// ----------------------------------------------------------------------------
//
//     ***     AUTO GENERATED CODE    ***    AUTO GENERATED CODE     ***
//
// ----------------------------------------------------------------------------
//
//     This file is automatically generated by Magic Modules and manual
//     changes will be clobbered when the file is regenerated.
//
//     Please read more about how to change this file in
//     .github/CONTRIBUTING.md.
//
// ----------------------------------------------------------------------------

package google

import (
	"fmt"
	"strings"
	"testing"

	"github.com/hashicorp/terraform-plugin-sdk/helper/acctest"
	"github.com/hashicorp/terraform-plugin-sdk/helper/resource"
	"github.com/hashicorp/terraform-plugin-sdk/terraform"
)

func TestAccDeploymentManagerDeployment_deploymentManagerDeploymentBasicExample(t *testing.T) {
	t.Parallel()

	context := map[string]interface{}{
		"random_suffix": acctest.RandString(10),
	}

	resource.Test(t, resource.TestCase{
		PreCheck:     func() { testAccPreCheck(t) },
		Providers:    testAccProviders,
		CheckDestroy: testAccCheckDeploymentManagerDeploymentDestroy,
		Steps: []resource.TestStep{
			{
				Config: testAccDeploymentManagerDeployment_deploymentManagerDeploymentBasicExample(context),
			},
			{
				ResourceName:            "google_deployment_manager_deployment.deployment",
				ImportState:             true,
				ImportStateVerify:       true,
				ImportStateVerifyIgnore: []string{"target", "create_policy", "delete_policy", "preview"},
			},
		},
	})
}

func testAccDeploymentManagerDeployment_deploymentManagerDeploymentBasicExample(context map[string]interface{}) string {
	return Nprintf(`
resource "google_deployment_manager_deployment" "deployment" {
  name = "my-deployment%{random_suffix}"

  target {
    config {
      content = <<EOF
resources:
- name: my-account
  type: iam.v1.serviceAccount
  properties:
    accountId: tf-dm-account%{random_suffix}
    displayName: Test service account created by a DM Deployment, created in Terraform
EOF
    }
  }

  labels {
    key = "foo"
    value = "foovalue"
  }
}
`, context)
}

func testAccCheckDeploymentManagerDeploymentDestroy(s *terraform.State) error {
	for name, rs := range s.RootModule().Resources {
		if rs.Type != "google_deployment_manager_deployment" {
			continue
		}
		if strings.HasPrefix(name, "data.") {
			continue
		}

		config := testAccProvider.Meta().(*Config)

		url, err := replaceVarsForTest(config, rs, "{{DeploymentManagerBasePath}}projects/{{project}}/global/deployments/{{name}}")
		if err != nil {
			return err
		}

		_, err = sendRequest(config, "GET", "", url, nil)
		if err == nil {
			return fmt.Errorf("DeploymentManagerDeployment still exists at %s", url)
		}
	}

	return nil
}

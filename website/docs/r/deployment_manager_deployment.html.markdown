---
# ----------------------------------------------------------------------------
#
#     ***     AUTO GENERATED CODE    ***    AUTO GENERATED CODE     ***
#
# ----------------------------------------------------------------------------
#
#     This file is automatically generated by Magic Modules and manual
#     changes will be clobbered when the file is regenerated.
#
#     Please read more about how to change this file in
#     .github/CONTRIBUTING.md.
#
# ----------------------------------------------------------------------------
subcategory: "Deployment Manager"
layout: "google"
page_title: "Google: google_deployment_manager_deployment"
sidebar_current: "docs-google-deployment-manager-deployment"
description: |-
  A collection of resources that are deployed and managed together using
  a configuration file
---

# google\_deployment\_manager\_deployment

A collection of resources that are deployed and managed together using
a configuration file



~> **Warning:** Deployment Manager shares similar behavior with Terraform as both
products manage GCP resource lifecycle and state. This Terraform
resource is intended only to manage a Deployment resource,
and attempts to manage the Deployment's resources in Terraform as well
will likely result in errors or unexpected behavior as the two tools
fight over ownership. We strongly discourage doing so unless you are an
experienced user of both tools.

<div class = "oics-button" style="float: right; margin: 0 0 -15px">
  <a href="https://console.cloud.google.com/cloudshell/open?cloudshell_git_repo=https%3A%2F%2Fgithub.com%2Fterraform-google-modules%2Fdocs-examples.git&cloudshell_working_dir=deployment_manager_deployment_basic&cloudshell_image=gcr.io%2Fgraphite-cloud-shell-images%2Fterraform%3Alatest&open_in_editor=main.tf&cloudshell_print=.%2Fmotd&cloudshell_tutorial=.%2Ftutorial.md" target="_blank">
    <img alt="Open in Cloud Shell" src="//gstatic.com/cloudssh/images/open-btn.svg" style="max-height: 44px; margin: 32px auto; max-width: 100%;">
  </a>
</div>
## Example Usage - Deployment Manager Deployment Basic


```hcl
resource "google_deployment_manager_deployment" "deployment" {
  name = "my-deployment"

  target {
    config {
      content = <<EOF
resources:
- name: my-account
  type: iam.v1.serviceAccount
  properties:
    accountId: tf-dm-account
    displayName: Test service account created by a DM Deployment, created in Terraform
EOF
    }
  }

  labels {
    key = "foo"
    value = "foovalue"
  }
}
```
## Example Usage - Deployment Manager Deployment Imports


```hcl
resource "google_deployment_manager_deployment" "deployment" {
  name = "single_vm"
  target {
    config {
      content = <<EOF
imports:
- path: vm_template.jinja

resources:
- name: my-vm
  type: vm_template.jinja
EOF
    }

    imports {
      name = "vm_template.jinja"
      content = file("vm_template.jinja")
    }
  }
}
```

## Argument Reference

The following arguments are supported:


* `name` -
  (Required)
  Unique name for the deployment


- - -


* `description` -
  (Optional)
  Optional user-provided description of deployment.

* `labels` -
  (Optional)
  Key-value pairs to apply to this address.  Structure is documented below.

* `target` -
  (Optional)
  Parameters that define your deployment, including the deployment
  configuration and relevant templates.  Structure is documented below.

* `create_policy` -
  (Optional)
  Set the policy to use for creating new resources. Only used on
  create and update. Valid values are `CREATE_OR_ACQUIRE` (default) or
  `ACQUIRE`. If set to `ACQUIRE` and resources do not already exist,
  the deployment will fail. Note that updating this field does not
  actually affect the deployment, just how it is updated.

* `delete_policy` -
  (Optional)
  Set the policy to use for deleting new resources on update/delete.
  Valid values are `DELETE` (default) or `ABANDON`. If `DELETE`,
  resource is deleted after removal from Deployment Manager. If
  `ABANDON`, the resource is only removed from Deployment Manager
  and is not actually deleted. Note that updating this field does not
  actually change the deployment, just how it is updated.

* `preview` -
  (Optional)
  If set to true, a deployment is created with "shell" resources
  that are not actually instantiated. This allows you to preview a
  deployment. It can be updated to false to actually deploy
  with real resources.
   ~>**NOTE**: Deployment Manager does not allow update
  of a deployment in preview (unless updating to preview=false). Thus,
  Terraform will force-recreate deployments if either preview is updated
  to true or if other fields are updated while preview is true.

* `project` - (Optional) The ID of the project in which the resource belongs.
    If it is not provided, the provider project is used.


The `labels` block supports:

* `key` -
  (Optional)
  Key for label.

* `value` -
  (Optional)
  Value of label.

The `target` block supports:

* `config` -
  (Optional)
  The root configuration file to use for this deployment.  Structure is documented below.

* `imports` -
  (Optional)
  Specifies import files for this configuration. This can be
  used to import templates or other files. For example, you might
  import a text file in order to use the file in a template.  Structure is documented below.


The `config` block supports:

* `content` -
  (Optional)
  The full YAML contents of your configuration file.

The `imports` block supports:

* `content` -
  (Optional)
  The full contents of the template that you want to import.

* `name` -
  (Optional)
  The name of the template to import, as declared in the YAML
  configuration.

## Attributes Reference

In addition to the arguments listed above, the following computed attributes are exported:


* `fingerprint` -
  Output only. Fingerprint generated by Deployment Manager for use in
  modification requests.

* `deployment_id` -
  Unique identifier for deployment. Output only.

* `manifest` -
  Output only. URL of the manifest representing the last manifest that
  was successfully deployed.

* `self_link` -
  Output only. Server defined URL for the resource.


## Timeouts

This resource provides the following
[Timeouts](/docs/configuration/resources.html#timeouts) configuration options:

- `create` - Default is 60 minutes.
- `update` - Default is 60 minutes.
- `delete` - Default is 60 minutes.

## Import

Deployment can be imported using any of these accepted formats:

```
$ terraform import google_deployment_manager_deployment.default projects/{{project}}/deployments/{{name}}
$ terraform import google_deployment_manager_deployment.default {{project}}/{{name}}
$ terraform import google_deployment_manager_deployment.default {{name}}
```

-> If you're importing a resource with beta features, make sure to include `-provider=google-beta`
as an argument so that Terraform uses the correct provider to import your resource.

## User Project Overrides

This resource supports [User Project Overrides](https://www.terraform.io/docs/providers/google/guides/provider_reference.html#user_project_override).
